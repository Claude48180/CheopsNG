/*
 * Cheops Next Generation GUI
 * 
 * io.c
 * I/O Management
 *
 * Copyright(C) 1999 Brent Priddy <toopriddy@mailcity.com>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *                                                                  
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111 USA
 */

#include <stdio.h>
#include <sys/epoll.h>   // Updated to epoll
#include <unistd.h>
#include <stdlib.h>
#include "io.h"
#include "logger.h"

//#define DEBUG_IO

#ifdef DEBUG_IO
    #define DEBUG(a) a
#else
    #define DEBUG(a) 
#endif

/* 
 * Kept for each file descriptor
 */
struct io_rec {
    cheops_io_cb callback;       /* What is to be called */
    void *data;                  /* Data to be passed */
    int *id;                     /* ID number */
};

/* Epoll file descriptor */
static int epoll_fd = -1;

/* Currently used io callback */
static int current_ioc = -1;
static int remove_current_ioc = 0;

static int io_grow() {
    /* 
     * No need to grow arrays in epoll
     */
    DEBUG(clog(LOG_DEBUG, "io_grow()\n"));
    return 0;
}

int cheops_io_init() {
    epoll_fd = epoll_create1(0);
    if (epoll_fd == -1) {
        perror("epoll_create1");
        return -1;
    }
    return 0;
}

int cheops_io_add(int fd, cheops_io_cb callback, void *data) {
    struct epoll_event ev;
    ev.events = EPOLLIN;
    ev.data.ptr = malloc(sizeof(struct io_rec));
    if (ev.data.ptr == NULL) {
        perror("malloc");
        return -1;
    }
    struct io_rec *rec = (struct io_rec *)ev.data.ptr;
    rec->callback = callback;
    rec->data = data;
    rec->id = &fd;

    if (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &ev) == -1) {
        perror("epoll_ctl: EPOLL_CTL_ADD");
        free(ev.data.ptr);
        return -1;
    }

    return 0;
}

int cheops_io_remove(int fd) {
    if (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, fd, NULL) == -1) {
        perror("epoll_ctl: EPOLL_CTL_DEL");
        return -1;
    }
    return 0;
}

int cheops_io_wait(int timeout) {
    struct epoll_event events[10];
    int nfds, n;

    nfds = epoll_wait(epoll_fd, events, 10, timeout);
    if (nfds == -1) {
        perror("epoll_wait");
        return -1;
    }

    for (n = 0; n < nfds; ++n) {
        struct io_rec *rec = (struct io_rec *)events[n].data.ptr;
        if (rec && rec->callback) {
            rec->callback(rec->id, rec->data);
        }
    }

    return 0;
}

void cheops_io_cleanup() {
    close(epoll_fd);
    epoll_fd = -1;
}
