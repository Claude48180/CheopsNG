/*
 * Cheops Next Generation GUI
 * 
 * cheops-main.c
 * Main Functions
 *
 * Copyright(C) 1999 Brent Priddy <toopriddy@mailcity.com>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *                                                                  
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111 USA
 */

#include <stdio.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/epoll.h>   // Updated to epoll
#include "cheops.h"
#include "logger.h"
#include "sched.h"
#include "event.h"
#include "io.h"
#include "misc.h"
#include "logger.h"

#define MAX_EVENTS 10

int cheops_init() {
    /*
     * Call all sub initialization
     * routines
     */
    if (make_home_dir() != 0) {
        fprintf(stderr, "Error creating home directory\n");
        return -1;
    }
    return 0;
}

int cheops_main() {
    /*
     * This is the main loop which looks for events and
     * handles the scheduler, etc
     */
    int epoll_fd, nfds, waittime;
    struct epoll_event ev, events[MAX_EVENTS];

    epoll_fd = epoll_create1(0);
    if (epoll_fd == -1) {
        perror("epoll_create1");
        return -1;
    }

    for (;;) {
        waittime = cheops_sched_wait();
        nfds = epoll_wait(epoll_fd, events, MAX_EVENTS, waittime);
        if (nfds == -1) {
            perror("epoll_wait");
            return -1;
        }

        for (int n = 0; n < nfds; ++n) {
            // Handle events
            cheops_io_handle_event(&events[n]);
        }

        cheops_sched_runq();
    }

    close(epoll_fd);
    return 0;
}
